const std = @import("std");
const SDL = @import("SDL");
const SDLex = @import("SDLex.zig");
const Vec2 = @import("Vec2.zig").Vec2;
const conertVecSize = @import("SDLex.zig").conertVecSize;

const viewError = error{
    outOfView,
};

pub const View = struct {
    port: SDL.RectangleF,
    window_size: SDL.Size,
    border: ?SDL.RectangleF = null, // view port limited to stay inside border
    max_size: ?Vec2 = null,
    min_size: ?Vec2 = null,

    pub fn init(window: *SDL.Window) View {
        const window_size: SDL.Size = window.getSize();
        return .{
            .port = .{ .x = 0, .y = 0, .width = @floatFromInt(window_size.width), .height = @floatFromInt(window_size.height) },
            .window_size = window.getSize(),

        };
    }

    pub fn convert(self: View, original: SDL.RectangleF) viewError!SDL.RectangleF {
        if (!original.hasIntersection(self.port)) {
            return viewError.outOfView;
        }
        //turn values to floats to allow fractional offset and scaling calculations.
        const win_sizeF = conertVecSize(self.window_size);
        var result = original;
        result.x -= self.port.x;
        result.y -= self.port.y;
        result.x *= win_sizeF.x / self.port.width;
        result.y *= win_sizeF.y / self.port.height;
        result.width *= win_sizeF.x / self.port.width;
        result.height *= win_sizeF.y / self.port.height;
        return result;
    }
    pub fn scale_vec_win_to_port(self: View, original: Vec2) Vec2 {
        const win_sizeF = conertVecSize(self.window_size);
        return Vec2{ .x = original.x * win_sizeF.x / self.port.width, .y = original.y * win_sizeF.y / self.port.height };
    }
    pub fn scale_vec_port_to_win(self: View, original: Vec2) Vec2 {
        const win_sizeF = conertVecSize(self.window_size);
        return Vec2{ .x = original.x * self.port.width / win_sizeF.x, .y = original.y * self.port.height / win_sizeF.y };
    }
    pub fn keepInLimits(self: *View) bool {
        const original_port = self.port;
        if (self.min_size) |min| {
            self.port.width = @max(self.port.width, min.x);
            self.port.height = @max(self.port.height, min.y);
        }
        std.debug.print("{d}, {d}\n", .{ self.port.width, self.port.height });
        if (self.max_size) |max| {
            self.port.width = @min(self.port.width, max.x);
            self.port.height = @min(self.port.height, max.y);
        }
        if (self.border) |border| {
            self.port.x = @max(border.x, self.port.x);
            self.port.y = @max(border.y, self.port.y);
            self.port.x = @min(border.x + border.width - self.port.width, self.port.x);
            self.port.y = @min(border.y + border.height - self.port.height, self.port.y);
        }
        return !SDLex.compareRect(original_port, self.port);
    }

    //resize and move the view-port to create a zoom effect.
    pub fn zoom(self: *View, scale: f32, point: ?SDL.Point) void {
        if (scale == 0)
            return;

        //turn values to floats to allow fractional offset and scaling calculations.
        const win_sizeF = conertVecSize(self.window_size);
        const save_rect: SDL.RectangleF = self.port;
        self.port.width /= scale;
        self.port.height /= scale;
        if (point) |p| {
            self.port.x += (save_rect.width - self.port.width) * @as(f32, @floatFromInt(p.x)) / win_sizeF.x;
            self.port.y += (save_rect.height - self.port.height) * @as(f32, @floatFromInt(p.y)) / win_sizeF.y;
        } else {
            self.port.x += (save_rect.width - self.port.width) / 2;
            self.port.y += (save_rect.height - self.port.height) / 2;
        }
        _ = keepInLimits(self);
    }
    pub fn getZoomed(self: View, scale: f32, point: ?SDL.Point) SDL.RectangleF {
        if (scale == 0) {
            return self.port;
        }
        //turn values to floats to allow fractional offset and scaling calculations.
        const win_sizeF = conertVecSize(self.window_size);
        const save_rect: SDL.RectangleF = self.port;
        var result = self.port;
        result.width /= scale;
        result.height /= scale;
        if (point) |p| {
            result.x += (save_rect.width - result.width) * @as(f32, @floatFromInt(p.x)) / win_sizeF.x;
            result.y += (save_rect.height - result.height) * @as(f32, @floatFromInt(p.y)) / win_sizeF.y;
        } else {
            result.x += (save_rect.width - result.width) / 2;
            result.y += (save_rect.height - result.height) / 2;
        }
        return result;
    }
    pub fn draw(self: View, rect: SDL.RectangleF, texture: SDL.Texture, renderer: SDL.Renderer) void {
        const transformed = self.convert(rect) catch null;
        if (transformed) |in_view| {
            renderer.copy(texture, SDLex.convertSDLRect(in_view), null) catch unreachable;
        }
    }
    pub fn fillRect(self: View, rect: SDL.RectangleF, renderer: SDL.Renderer) void {
        const transformed = self.convert(rect) catch null;
        if (transformed) |in_view| {
            renderer.fillRect(SDLex.convertSDLRect(in_view)) catch unreachable;
        }
    }
};
